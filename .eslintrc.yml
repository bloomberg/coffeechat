extends:
  - plugin:@typescript-eslint/eslint-recommended
  - plugin:@typescript-eslint/recommended
  - plugin:@typescript-eslint/recommended-requiring-type-checking
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript
  - plugin:promise/recommended
  - next
  - airbnb-typescript
  - plugin:unicorn/recommended
  - plugin:jest/recommended
  - plugin:jest/style
  - prettier
plugins:
  - react-hooks
  - unicorn
  - inclusive-language
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 6
  sourceType: module
  ecmaFeatures:
    jsx: true
    modules: true
  project: './tsconfig.json'
env:
  node: true
  es6: true
  browser: true
rules:
  # NOTE: any rule set to warning (warn or 1)
  # eslint will NOT  output any warning when running `npm test` or `npm run eslint`
  # warnings will still appear on the editor
  curly: error
  '@typescript-eslint/no-unused-vars': error
  '@typescript-eslint/no-floating-promises': error
  react/jsx-wrap-multilines:
    - error
    - declaration: false
      assignment: false
  react/jsx-indent: 0
  react/jsx-props-no-spreading: 0
  react/prop-types: 0
  react-hooks/rules-of-hooks: error
  react/no-array-index-key: error
  react/jsx-indent-props: 0
  react/no-unescaped-entities: 0
  react/require-default-props: 0
  import/no-unresolved: error #re-add no-unresolved
  unicorn/custom-error-definition: error
  inclusive-language/use-inclusive-words:
    - error
    - words:
        - word: guys
          suggestions:
            - people
          explanation:
            The usage of the non-inclusive word '{{word}}' is discouraged, use
            '{{suggestion}}' instead.
        - word: dummy
          suggestions:
            - mock
          explanation:
            The usage of the non-inclusive word '{{word}}' is discouraged, use
            '{{suggestion}}' instead.
        - word: handicap
          suggestions:
            - disable
          explanation:
            The usage of the non-inclusive word '{{word}}' is discouraged, use
            '{{suggestion}}' instead.
  import/no-extraneous-dependencies:
    - error
    - devDependencies:
        - '**/*.spec.{ts,tsx}'
        - '**/*.stories.{ts,tsx}'
        - '.storybook/*.{js,jsx,ts,tsx}'
        - 'jest.*.js'
        - types/**/*.d.ts
        - scripts/**/*.{ts,tsx,js,jsx}
  react/jsx-one-expression-per-line: 0
  react/jsx-key: error
  import/prefer-default-export: 0
  quotes:
    - error
    - single # has to match prettier quotes
    - avoidEscape: true # has to always be true to not clash with prettier
      allowTemplateLiterals: false
  '@typescript-eslint/no-unsafe-assignment': 1
  '@typescript-eslint/no-unsafe-member-access': 1
  '@typescript-eslint/no-unsafe-call': 1
  '@typescript-eslint/no-unsafe-return': 1
  '@typescript-eslint/restrict-template-expressions': 1
  '@typescript-eslint/explicit-function-return-type':
    - error
    - allowExpressions: true
  react/react-in-jsx-scope: 0 # not needed because React 17 fixed this!
  unicorn/no-null: 0
  unicorn/prefer-node-protocol: 0
  unicorn/filename-case: 0
  unicorn/no-array-for-each: 0
  unicorn/no-array-reduce: 0
  unicorn/no-array-callback-reference: 0
overrides:
  - files:
      - '**/*.js'
    rules:
      '@typescript-eslint/explicit-function-return-type': 0
      '@typescript-eslint/explicit-module-boundary-types': 0
      react/jsx-filename-extension: 0
      '@typescript-eslint/no-unsafe-return': 0
      '@typescript-eslint/no-unsafe-assignment': 0
      '@typescript-eslint/no-unsafe-call': 0
      '@typescript-eslint/no-unsafe-member-access': 0
      '@typescript-eslint/no-var-requires': 0
      unicorn/prefer-module: 0
  - files:
      - 'scripts/**/*.{ts,tsx,js,jsx}'
    rules:
      no-console: 0
settings:
  react:
    version: detect
